<snippet>
	<scope>source.erlang - source.erlang.expression</scope>
	<description>gen_statem handle_event Callbacks</description>
	<content><![CDATA[-export([
    start_link/0
]).

-include_lib("kernel/include/logger.hrl").

-behaviour(gen_statem).

-export([
    callback_mode/0,
    init/1,
    terminate/3,
    code_change/4
]).

-export([
    handle_event/4
]).

start_link() ->
	gen_statem:start_link({local, ?MODULE}, ?MODULE, {}, []).

-spec callback_mode() -> gen_statem:callback_mode_result().
callback_mode() -> 
	[handle_event_function].

init({}) ->
	{ok, initial_state, _Data=#{}}.

-spec handle_event('enter',
		   OldState :: term(),
		   State :: term(),
		   Data :: term()) ->
			  gen_statem:state_enter_result(term());
		  (gen_statem:event_type(),
		   Msg :: term(),
		   State :: term(),
		   Data :: term()) ->
			  gen_statem:event_handler_result(term()).
handle_event(T=timeout, Msg, State, Data) ->
    ?LOG_WARNING("Unhandled ~p ~p", [T, Msg]),
    {next_state, State, Data, []};
handle_event(T=internal, Msg, State, Data) ->
    ?LOG_WARNING("Unhandled ~p ~p", [T, Msg]),
    {next_state, State, Data, []};
handle_event({call, From}, _Msg, State, Data) ->
    {next_state, State, Data, [{reply,From,ok}]};
handle_event(cast, _Msg, State, Data) ->
    {next_state, State, Data, []};
handle_event(info, _Msg, State, Data) ->
    {next_state, State, Data, []}.

terminate(_Reason, _StateName, _State) ->
    void.

code_change(_OldVsn, StateName, State, _Extra) ->
    {ok, StateName, State}.
]]></content>
</snippet>