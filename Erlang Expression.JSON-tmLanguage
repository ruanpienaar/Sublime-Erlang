{
  "scopeName": "source.erlang.expression",
  "name": "Erlang Expressions",
  "fileTypes": [
      "emakefile",
      "Emakefile",
      "app",
      "app.src",
      "appup",
      "rebar.config",
      "reltool.config"
  ],
  "tokens": {
    "ATOM": "'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'|[[:lower:]][[:alnum:]@_]*",
    "MACRO-NAME": "[[:alpha:]_][[:alnum:]@_]*",
    "VARIABLE": "_[[:alnum:]@_]+|[[:upper:]][[:alnum:]@_]*",
    "CHAR-ESCAPE": "\\\\(?:\\^.|[0-7]{1,3}|x[0-9a-fA-F]{2}|x\\{[0-9a-fA-F]+\\}|[^x\\^])"
  },

  "patterns": [
    {"include": "#comment"},
    {"include": "#record-usage"},
    {"include": "#maps-usage"},
    {"include": "#macro-usage"},
    {"include": "#expression"},
    {"include": "#illegal-keyword"},
    {"include": "#textual-operator"},
    {"include": "#function-call"},
    {"include": "#tuple"},
    {"include": "#list"},
    {"include": "#binary"},
    {"include": "#parenthesized-expression"},
    {"include": "#character"},
    {"include": "#number"},
    {"include": "#atom"},
    {"include": "#string"},
    {"include": "#symbolic-operator"},
    {"include": "#variable"}
  ],

  "repository": {
    "atom": {
      "patterns": [
        {
          "begin": "(')",
          "beginCaptures": {
            "1": {"name": "punctuation.definition.string.symbol.begin.erlang"}
          },
          "end": "(')",
          "endCaptures": {
            "1": {"name": "punctuation.definition.string.symbol.end.erlang"}
          },
          "name": "constant.other.symbol.quoted.single.erlang",
          "patterns": [
            {
              "captures": {
                "1": {"name": "punctuation.definition.escape.erlang"},
                "3": {"name": "punctuation.definition.escape.erlang"}
              },
              "match": "⟪CHAR-ESCAPE⟫",
              "name": "constant.other.symbol.escape.erlang"
            },
            {
              "match": "\\\\\\^?.?",
              "name": "invalid.illegal.symbol.escape.erlang"
            }
          ]
        },
        {
          "match": "[[:lower:]][[:alnum:]@_]*",
          "name": "constant.other.symbol.unquoted.erlang"
        }
      ]
    },

    "binary": {
      "begin": "(<<)",
      "beginCaptures": {
        "1": {"name": "punctuation.definition.binary.begin.erlang"}
      },
      "end": "(>>)",
      "endCaptures": {
        "1": {"name": "punctuation.definition.binary.end.erlang"}
      },
      "name": "meta.structure.binary.erlang",
      "patterns": [
        {
          "captures": {
            "1": {"name": "punctuation.separator.binary.erlang"},
            "2": {"name": "punctuation.separator.value-size.erlang"}
          },
          "match": "(,)|(:)"
        },
        {
          "match": "\\|\\|",
          "name": "keyword.operator.symbolic.comprehension.erlang"
        },
        {
          "match": "<-",
          "name": "keyword.operator.symbolic.comprehension.list-items.erlang"
        },
        {
          "match": "<=",
          "name": "keyword.operator.symbolic.comprehension.binary-items.erlang"
        },
        {"include": "#internal-binary-type-specifiers"},
        {"include": "$self"}
      ]
    },

    "character": {
      "patterns": [
        {
          "match": "\\$ ",
          "name": "invalid.illegal.raw-space-char-literal.erlang"
        },
        {
          "match": "\\$(?:[^\\\\]|⟪CHAR-ESCAPE⟫)(?![:alnum:])",
          "name": "constant.character.erlang"
        },
        {
          "match": "\\$\\\\x\\{.+\\}",
          "name": "invalid.illegal.character.erlang"
        },
        {
          "match": "\\$.?",
          "name": "invalid.illegal.character.erlang"
        }
      ]
    },

    "comment": {
      "begin": "(%+)",
      "beginCaptures": {
        "1": {"name": "punctuation.definition.comment.erlang"}
      },
      "end": "$\\n?",
      "name": "comment.line.erlang"
    },

    "macro-usage": {
      "patterns": [
        {
          "begin": "(\\?⟪MACRO-NAME⟫)\\s*(\\()",
          "beginCaptures": {
            "1": {"name": "keyword.other.macro.erlang"},
            "2": {"name": "punctuation.definition.parameters.begin.erlang"}
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {"name": "punctuation.definition.parameters.end.erlang"}
          },
          "patterns": [
            {
               "match": ",",
               "name": "punctuation.separator.parameters.erlang"
            },
            {"include": "$self"}
          ]
        },
        {
          "match": "(\\?⟪MACRO-NAME⟫)(?!\\()",
          "captures": {
            "1": {"name": "keyword.other.macro.erlang"}
          }
        },
        {
          "match": "(\\?\\?)(⟪VARIABLE⟫)",
          "captures": {
            "1": {"name": "keyword.operator.macro.stringify.erlang"},
            "2": {"name": "variable.other.preprocessor.erlang"}
          }
        }
      ]
    },

    "expression": {
      "patterns": [
        {
          "begin": "\\b(if)\\b",
          "beginCaptures": {
            "1": {"name": "keyword.control.if.erlang"}
          },
          "end": "\\b(end)\\b",
          "endCaptures": {
            "1": {"name": "keyword.control.end.erlang"}
          },
          "name": "meta.expression.if.erlang",
          "patterns": [
            {
              "name": "meta.guard-expression.erlang",
              "begin": "(?<=if|;)",
              "end": "(?=->)",
              "patterns": [
                {"include": "$self"}
              ]
            },
            {
              "begin": "(->)",
              "beginCaptures": {
                "1": {"name": "punctuation.separator.clause-head-body.erlang"}
              },
              "end": "(;)|(?=\\b(end)\\b)",
              "endCaptures": {
                "1": {"name": "punctuation.separator.clauses.erlang"}
              },
              "patterns": [
                {"include": "#internal-expression-list"}
              ]
            }
          ]
        },
        {
          "begin": "\\b(case)\\b",
          "beginCaptures": {
            "1": {"name": "keyword.control.case.erlang"}
          },
          "end": "\\b(end)\\b",
          "endCaptures": {
            "1": {"name": "keyword.control.end.erlang"}
          },
          "name": "meta.expression.case.erlang",
          "patterns": [
            {
              "begin": "(?<=case)",
              "end": "\\b(of)\\b",
              "endCaptures": {
                "1": {"name": "keyword.control.of.erlang"}
              },
              "patterns": [
                {"include": "$self"}
              ]
            },
            {
              "begin": "(?<=of|;)",
              "end": "(?=;|\\b(end)\\b)",
              "patterns": [
                {"include": "#internal-guard-expression"},
                {"include": "#internal-arrow-clause-expression"},
                {"include": "$self"}
              ]
            }
          ]
        },
        {
          "name": "meta.expression.receive.erlang",
          "begin": "\\b(receive)\\b",
          "beginCaptures": {
            "1": {"name": "keyword.control.receive.erlang"}
          },
          "end": "\\b(end)\\b",
          "endCaptures": {
            "1": {"name": "keyword.control.end.erlang"}
          },
          "patterns": [
            {
              "begin": "(?<=receive|;)",
              "end": "(?=\\b(after|end)\\b|;)",
              "patterns": [
                {"include": "#internal-guard-expression"},
                {"include": "#internal-arrow-clause-expression"},
                {"include": "$self"}
              ]
            },
            {
              "name": "meta.receive-after-section.erlang",
              "begin": "\\b(after)\\b",
              "beginCaptures": {
                "1": {"name": "keyword.control.after.erlang"}
              },
              "end": "(?=\\b(end)\\b)",
              "patterns": [
                {"include": "#internal-arrow-clause-expression"},
                {"include": "$self"}
              ]
            }
          ]
        },
        {
          "name": "meta.expression.try.erlang",
          "begin": "\\b(try)\\b",
          "beginCaptures": {
            "1": {"name": "keyword.control.try.erlang"}
          },
          "end": "\\b(end)\\b",
          "endCaptures": {
            "1": {"name": "keyword.control.end.erlang"}
          },
          "patterns": [
            {
              "begin": "\\b(of)\\b",
              "beginCaptures": {
                "1": {"name": "keyword.control.of.erlang"}
              },
              "end": "(?=\\b(catch|after|end)\\b)",
              "patterns": [
                {"include": "#internal-guard-expression"},
                {"include": "#internal-arrow-clause-expression"},
                {"include": "$self"}
              ]
            },
            {
              "name": "meta.try-catch-section.erlang",
              "begin": "\\b(catch)\\b",
              "beginCaptures": {
                "1": {"name": "keyword.control.catch.erlang"}
              },
              "end": "(?=\\b(after|end)\\b)",
              "patterns": [
                {
                  "match": "\\b(error|throw|exit|'error'|'throw'|'exit')\\b\\s*(:)",
                  "captures": {
                    "1": {"name": "keyword.other.error-class.erlang"},
                    "2": {"name": "punctuation.separator.error-class.erlang"}
                  }
                },
                {
                  "match": ":",
                  "name": "punctuation.separator.error-class.erlang"
                },
                {"include": "#internal-guard-expression"},
                {"include": "#internal-arrow-clause-expression"},
                {"include": "$self"}
              ]
            },
            {
              "name": "meta.try-after-section",
              "begin": "\\b(after)\\b",
              "beginCaptures": {
                "1": {"name": "keyword.control.after.erlang"}
              },
              "end": "(?=\\b(end)\\b)",
              "patterns": [
                {
                  "match": "\\.",
                  "name": "invalid.illegal.punctuation.dot.erlang"
                },
                {"include": "$self"}
              ]
            },
            {"include": "$self"}
          ]
        },
        {
          "name": "meta.expression.begin.erlang",
          "begin": "\\b(begin)\\b",
          "beginCaptures": {
            "1": {"name": "keyword.control.begin.erlang"}
          },
          "end": "\\b(end)\\b",
          "endCaptures": {
            "1": {"name": "keyword.control.end.erlang"}
          },
          "patterns": [
            {
              "match": "\\.",
              "name": "invalid.illegal.punctuation.dot.erlang"
            },
            {"include": "#internal-expression-list"}
          ]
        },
        {
          "match": "\\b(catch)\\b",
          "captures": {
            "1": {"name": "keyword.control.catch.erlang"}
          }
        },
        {
          "name": "meta.expression.fun.erlang",
          "begin": "\\b(fun)\\b",
          "beginCaptures": {
            "1": {"name": "keyword.control.fun.erlang"}
          },
          "end": "\\b(end)\\b|(?=(/\\s*(?:[0-9]+|⟪VARIABLE⟫))|([^[:alnum:]\\s\\?\\('/_]+))",
          "endCaptures": {
            "1": {"name": "keyword.control.end.erlang"}
          },
          "patterns": [
            {
              "begin": "(?=\\()",
              "end": "(?=\\bend\\b)",
              "patterns": [
                {
                  "match": ";",
                  "name": "punctuation.separator.clauses.erlang"
                },
                {"include": "#internal-function-parts"}
              ]
            },
            {
              "match": "\\b(?:(_)|(⟪VARIABLE⟫))\\b",
              "captures": {
                "1": {"name": "variable.language.omitted.fun-name.erlang"},
                "2": {"name": "variable.other.fun-name.erlang"}
              }
            },
            {
              "match": "(⟪ATOM⟫)\\s*(:)",
              "captures": {
                "1": {"name": "meta.function.module.erlang"},
                "2": {"name": "punctuation.separator.module-function.erlang"}
              }
            },
            {
              "match": "⟪ATOM⟫",
              "name": "meta.function.erlang"
            },
            {
              "match": "(/)\\s*(?:([0-9]+)|(_)|(⟪VARIABLE⟫))?",
              "captures": {
                "1": {"name": "punctuation.separator.function-arity.erlang"},
                "2": {"name": "constant.numeric.decimal.function-arity.erlang"},
                "3": {"name": "variable.language.omitted.function-arity.erlang"},
                "4": {"name": "variable.other.function-arity.erlang"}
              }
            },
            {"include": "#macro-usage"},
            {"include": "#comment"}
          ]
        }
      ]
    },

    "internal-guard-expression": {
      "name": "meta.guard-expression.erlang",
      "begin": "(when)",
      "beginCaptures": {
        "1": {"name": "keyword.control.when.erlang"}
      },
      "end": "(?=->)",
      "patterns": [
        {
          "match": ",|;",
          "name": "punctuation.separator.guards.erlang"
        },
        {"include": "$self"}
      ]
    },

    "internal-arrow-clause-expression": {
      "begin": "(->)",
      "beginCaptures": {
        "1": {"name": "punctuation.separator.clause-head-body.erlang"}
      },
      "end": "(;)|(?=\\b(end|after|catch)\\b)",
      "endCaptures": {
        "1": {"name": "punctuation.separator.clauses.erlang"}
      },
      "patterns": [
        {
          "match": "\\.",
          "name": "invalid.illegal.punctuation.dot.erlang"
        },
        {"include": "#internal-expression-list"}
      ]
    },

    "internal-expression-list": {
      "patterns": [
        {
          "match": ",",
          "name": "punctuation.separator.expressions.erlang"
        },
        {"include": "$self"}
      ]
    },

    "function-call": {
      "patterns": [
        {
          "begin": "(?=(⟪ATOM⟫)\\s*(\\(|:\\s*(⟪ATOM⟫)\\s*\\())",
          "end": "(\\))",
          "endCaptures": {
            "1": {"name": "punctuation.definition.parameters.end.erlang"}
          },
          "name": "meta.function-call.erlang",
          "patterns": [
            {
              "begin": "(?:(erlang)\\s*(:)\\s*)?(abs|binary_part|bit_size|byte_size|element|float|hd|is_atom|is_binary|is_bitstring|is_boolean|is_float|is_function|is_integer|is_list|is_number|is_pid|is_port|is_record|is_reference|is_tuple|length|node|round|self|size|tl|trunc|tuple_size|is_map)\\s*(\\()",
              "beginCaptures": {
                "1": {"name": "meta.function.module.erlang"},
                "2": {"name": "punctuation.separator.module-function.erlang"},
                "3": {"name": "support.function.guard.erlang"},
                "4": {"name": "punctuation.definition.parameters.begin.erlang"}
              },
              "end": "(?=\\))",
              "patterns": [
                {
                  "match": ",",
                  "name": "punctuation.separator.parameters.erlang"
                },
                {"include": "$self"}
              ]
            },
            {
              "begin": "(?:(⟪ATOM⟫)?\\s*(:)\\s*)?(⟪ATOM⟫)\\s*(\\()",
              "beginCaptures": {
                "1": {"name": "meta.function.module.erlang"},
                "2": {"name": "punctuation.separator.module-function.erlang"},
                "3": {"name": "meta.function.erlang"},
                "4": {"name": "punctuation.definition.parameters.begin.erlang"}
              },
              "end": "(?=\\))",
              "patterns": [
                {
                  "match": ",",
                  "name": "punctuation.separator.parameters.erlang"
                },
                {"include": "$self"}
              ]
            }
          ]
        },
        {
          "comment": "match incomplete function calls to improve typing experience",
          "name": "meta.function-call.erlang",
          "match": "(⟪ATOM⟫)?\\s*(:)(⟪ATOM⟫)?(?!:)",
          "captures": {
            "1": {"name": "meta.function.module.erlang"},
            "2": {"name": "punctuation.separator.module-function.erlang"},
            "3": {"name": "meta.function.erlang"}
          }
        }
      ]
    },

    "internal-function-parts": {
      "name": "function-parts",
      "patterns": [
        {
          "begin": "(\\()",
          "beginCaptures": {
            "1": {"name": "punctuation.definition.parameters.begin.erlang"}
          },
          "end": "(\\))",
          "endCaptures": {
            "1": {"name": "punctuation.definition.parameters.end.erlang"}
          },
          "patterns": [
            {
              "match": ",",
              "name": "punctuation.separator.parameters.erlang"
            },
            {"include": "$self"}
          ]
        },
        {"include": "#internal-guard-expression"},
        {
          "begin": "(->)",
          "beginCaptures": {
            "1": {"name": "punctuation.separator.function.head-body.erlang"}
          },
          "end": "(?=;|end|\\.)",
          "patterns": [
            {"include": "#internal-expression-list"}
          ]
        },
        {"include": "#comment"}
      ]
    },

    "internal-binary-type-specifiers": {
      "begin": "(/)",
      "beginCaptures": {
        "1": {"name": "punctuation.separator.value-type.erlang"}
      },
      "end": "(?=,|:|>>)",
      "patterns": [
        {
          "match": "(integer|float|binary|bytes|bitstring|bits|utf8|utf16|utf32)|(signed|unsigned)|(big|little|native)|(unit)|(-)",
          "captures": {
            "1": {"name": "storage.modifier.binary.type.erlang"},
            "2": {"name": "storage.modifier.binary.signedness.erlang"},
            "3": {"name": "storage.modifier.binary.endianness.erlang"},
            "4": {"name": "storage.modifier.binary.unit.erlang"},
            "5": {"name": "punctuation.separator.type-specifiers.erlang"}
          }
        }
      ]
    },

    "illegal-keyword": {
      "match": "\\b(after|begin|case|catch|cond|end|fun|if|let|of|try|receive|when)\\b",
      "name": "invalid.illegal.keyword.control.erlang"
    },

    "list": {
      "begin": "(\\[)",
      "beginCaptures": {
        "1": {"name": "punctuation.definition.list.begin.erlang"}
      },
      "end": "(\\])",
      "endCaptures": {
        "1": {"name": "punctuation.definition.list.end.erlang"}
      },
      "name": "meta.structure.list.erlang",
      "patterns": [
        {
          "match": "\\|(?!\\|)|,",
          "name": "punctuation.separator.list.erlang"
        },
        {
          "match": "\\|\\|",
          "name": "keyword.operator.symbolic.comprehension.erlang"
        },
        {
          "match": "<-",
          "name": "keyword.operator.symbolic.comprehension.list-items.erlang"
        },
        {
          "match": "<=",
          "name": "keyword.operator.symbolic.comprehension.binary-items.erlang"
        },
        {"include": "$self"}
      ]
    },

    "number": {
      "begin": "(?=\\d)",
      "end": "(?!\\d)",
      "patterns": [
        {
          "captures": {
            "1": {"name": "punctuation.separator.integer-float.erlang"},
            "3": {"name": "punctuation.separator.float-exponent.erlang"}
          },
          "match": "\\d+(\\.)\\d+(([eE][\\+\\-])?\\d+)?",
          "name": "constant.numeric.float.erlang"
        },
        {"include": "#integer"}
      ]
    },

    "integer": {
      "patterns": [
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "2(#)[0-1]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.binary.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "3(#)[0-2]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-3.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "4(#)[0-3]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-4.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "5(#)[0-4]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-5.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "6(#)[0-5]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-6.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "7(#)[0-6]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-7.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "8(#)[0-7]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.octal.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "9(#)[0-8]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-9.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "10(#)\\d+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.decimal.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "11(#)[\\daA]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-11.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "12(#)[\\da-bA-B]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-12.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "13(#)[\\da-cA-C]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-13.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "14(#)[\\da-dA-D]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-14.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "15(#)[\\da-eA-E]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-15.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "16(#)\\h+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.hexadecimal.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "17(#)[\\da-gA-G]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-17.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "18(#)[\\da-hA-H]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-18.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "19(#)[\\da-iA-I]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-19.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "20(#)[\\da-jA-J]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-20.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "21(#)[\\da-kA-K]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-21.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "22(#)[\\da-lA-L]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-22.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "23(#)[\\da-mA-M]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-23.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "24(#)[\\da-nA-N]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-24.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "25(#)[\\da-oA-O]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-25.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "26(#)[\\da-pA-P]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-26.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "27(#)[\\da-qA-Q]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-27.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "28(#)[\\da-rA-R]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-28.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "29(#)[\\da-sA-S]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-29.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "30(#)[\\da-tA-T]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-30.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "31(#)[\\da-uA-U]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-31.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "32(#)[\\da-vA-V]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-32.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "33(#)[\\da-wA-W]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-33.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "34(#)[\\da-xA-X]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-34.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "35(#)[\\da-yA-Y]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-35.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.separator.base-integer.erlang"}
          },
          "match": "36(#)[\\da-zA-Z]+(?![\\da-zA-Z])",
          "name": "constant.numeric.integer.base-36.erlang"
        },
        {
          "match": "\\d+#[\\da-zA-Z]+",
          "name": "invalid.illegal.integer.erlang"
        },
        {
          "match": "\\d+",
          "name": "constant.numeric.integer.decimal.erlang"
        }
      ]
    },

    "parenthesized-expression": {
      "begin": "(\\()",
      "beginCaptures": {
        "1": {"name": "punctuation.section.expression.begin.erlang"}
      },
      "end": "(\\))",
      "endCaptures": {
        "1": {"name": "punctuation.section.expression.end.erlang"}
      },
      "name": "meta.expression.parenthesized",
      "patterns": [
        {"include": "$self"}
      ]
    },

    "record-usage": {
      "patterns": [
        {
          "match": "(#⟪ATOM⟫)\\s*(\\.)\\s*(⟪ATOM⟫)",
          "name": "meta.record-usage.erlang",
          "captures": {
            "1": {"name": "storage.type.record.erlang"},
            "2": {"name": "punctuation.separator.record-field.erlang"},
            "3": {"name": "storage.type.record.field.erlang"}
          }
        },
        {
          "begin": "(#⟪ATOM⟫)\\s*(\\{)",
          "beginCaptures": {
            "1": {"name": "storage.type.record.erlang"},
            "2": {"name": "punctuation.definition.class.record.begin.erlang"}
          },
          "end": "(\\})",
          "endCaptures": {
            "1": {"name": "punctuation.definition.class.record.end.erlang"}
          },
          "name": "meta.record-usage.erlang",
          "patterns": [
            {
              "begin": "((⟪ATOM⟫)|(_))\\s*(=)",
              "beginCaptures": {
                "2": {"name": "storage.type.record.field.erlang"},
                "3": {"name": "storage.type.record.field.catch-all.erlang"},
                "4": {"name": "keyword.operator.assignment.erlang"}
              },
              "end": "(,)|(?=\\})",
              "endCaptures": {
                "1": {"name": "punctuation.separator.class.record.erlang"}
              },
              "patterns": [
                {"include": "$self"}
              ]
            },
            {"include": "#comment"},
            {"include": "#macro-usage"}
          ]
        },
        {
          "comment": "match incomplete record references to improve typing experience",
          "match": "(#⟪ATOM⟫)",
          "name": "meta.record-usage.erlang",
          "captures": {
            "1": {"name": "storage.type.record.erlang"}
          }
        }
      ]
    },

    "maps-usage": {
      "patterns": [
        {
          "begin": "(#)\\s*(\\{)",
          "beginCaptures": {
            "1": {"name": "storage.type.maps.erlang"},
            "2": {"name": "punctuation.type.maps.begin.erlang"}
          },
          "end": "(\\})",
          "endCaptures": {
            "1": {"name": "punctuation.type.maps.end.erlang"}
          },
          "name": "meta.maps-usage.erlang",
          "patterns": [
            {"include": "#macro-usage"},
            {
              "begin": "(?<=(\\{)|(,))",
              "beginCaptures": {
                "3": {"name": "punctuation.separator.type.maps.erlang"}
              },
              "end": "(:=|=>)",
              "endCaptures": {
                "1": {"name": "keyword.operator.assignment.erlang"}
              },
              "patterns": [
                {"include": "#tuple"},
                {"include": "#list"},
                {"include": "#binary"},
                {"include": "#parenthesized-expression"},
                {"include": "#character"},
                {"include": "#number"},
                {"include": "#atom"},
                {"include": "#string"},
                {"include": "#variable"},
                {"include": "#comment"},
                {"include": "#macro-usage"}
              ]
            },
            {
              "begin": "(?<=(:=|=>))",
              "end": "(?=(,|\\}))",
              "patterns": [
                {"include": "$self"}
              ]
            }
          ]
        }
      ]
    },

    "string": {
      "begin": "(\")",
      "beginCaptures": {
        "1": {"name": "punctuation.definition.string.begin.erlang"}
      },
      "end": "(\")",
      "endCaptures": {
        "1": {"name": "punctuation.definition.string.end.erlang"}
      },
      "name": "string.quoted.double.erlang",
      "patterns": [
        {
          "captures": {
            "1": {"name": "punctuation.definition.escape.erlang"},
            "3": {"name": "punctuation.definition.escape.erlang"}
          },
          "match": "⟪CHAR-ESCAPE⟫",
          "name": "constant.character.escape.erlang"
        },
        {
          "match": "\\\\\\^?.?",
          "name": "invalid.illegal.string.erlang"
        },
        {
          "captures": {
            "1":  {"name": "punctuation.definition.placeholder.erlang"},
            "10": {"name": "punctuation.separator.placeholder-parts.erlang"},
            "12": {"name": "punctuation.separator.placeholder-parts.erlang"},
            "3":  {"name": "punctuation.separator.placeholder-parts.erlang"},
            "4":  {"name": "punctuation.separator.placeholder-parts.erlang"},
            "6":  {"name": "punctuation.separator.placeholder-parts.erlang"},
            "8":  {"name": "punctuation.separator.placeholder-parts.erlang"}
          },
          "match": "(~)((\\-)?\\d+|(\\*))?((\\.)(\\d+|(\\*)|))?((\\.)((\\*)|.))?[t]?[~cfegswpWPBX#bx\\+ni]",
          "name": "constant.other.placeholder.erlang"
        },
        {
          "captures": {
            "1": {"name": "punctuation.definition.placeholder.erlang"},
            "2": {"name": "punctuation.separator.placeholder-parts.erlang"}
          },
          "match": "(~)(\\*)?(\\d+)?[~du\\-#fsacl]",
          "name": "constant.other.placeholder.erlang"
        },
        {
          "match": "~[^\"]?",
          "name": "invalid.illegal.string.erlang"
        }
      ]
    },

    "symbolic-operator": {
      "patterns": [
        {
          "match": "->",
          "name": "invalid.illegal.arrow.erlang"
        },
        {
          "match": "\\+\\+|\\+|--|-|\\*|/=|/|=/=|=:=|==|=<|=|<|>=|>|!",
          "name": "keyword.operator.symbolic.erlang"
        }
      ]
    },

    "textual-operator": {
      "match": "\\b(andalso|band|and|bxor|xor|bor|orelse|or|bnot|not|bsl|bsr|div|rem)\\b",
      "name": "keyword.operator.textual.erlang"
    },

    "tuple": {
      "begin": "(\\{)",
      "beginCaptures": {
        "1": {"name": "punctuation.definition.tuple.begin.erlang"}
      },
      "end": "(\\})",
      "endCaptures": {
        "1": {"name": "punctuation.definition.tuple.end.erlang"}
      },
      "name": "meta.structure.tuple.erlang",
      "patterns": [
        {
          "match": ",",
          "name": "punctuation.separator.tuple.erlang"
        },
        {"include": "$self"}
      ]
    },

    "variable": {
      "match": "(⟪VARIABLE⟫)|(_)",
      "captures": {
        "1": {"name": "variable.other.erlang"},
        "2": {"name": "variable.language.omitted.erlang"}
      }
    }
  }
}
