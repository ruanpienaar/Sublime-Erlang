<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>emakefile</string>
		<string>Emakefile</string>
		<string>app</string>
		<string>app.src</string>
		<string>appup</string>
		<string>rebar.config</string>
		<string>reltool.config</string>
	</array>
	<key>name</key>
	<string>Erlang Expressions</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comment</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#record-usage</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#maps-usage</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#macro-usage</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#expression</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#illegal-keyword</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#textual-operator</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#function-call</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#tuple</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#list</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#binary</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#parenthesized-expression</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#character</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#number</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#atom</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#string</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#symbolic-operator</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#variable</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>atom</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(')</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.symbol.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(')</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.symbol.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>constant.other.symbol.quoted.single.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.escape.erlang</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.escape.erlang</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(?:\\(?:\^.|[0-7]{1,3}|x[0-9a-fA-F]{2}|x\{[0-9a-fA-F]+\}|[^x\^]))</string>
							<key>name</key>
							<string>constant.other.symbol.escape.erlang</string>
						</dict>
						<dict>
							<key>match</key>
							<string>\\\^?.?</string>
							<key>name</key>
							<string>invalid.illegal.symbol.escape.erlang</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>match</key>
					<string>[[:lower:]][[:alnum:]@_]*</string>
					<key>name</key>
					<string>constant.other.symbol.unquoted.erlang</string>
				</dict>
			</array>
		</dict>
		<key>binary</key>
		<dict>
			<key>begin</key>
			<string>(&lt;&lt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binary.begin.erlang</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(&gt;&gt;)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.binary.end.erlang</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.structure.binary.erlang</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.binary.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.value-size.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(,)|(:)</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\|\|</string>
					<key>name</key>
					<string>keyword.operator.symbolic.comprehension.erlang</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&lt;-</string>
					<key>name</key>
					<string>keyword.operator.symbolic.comprehension.list-items.erlang</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&lt;=</string>
					<key>name</key>
					<string>keyword.operator.symbolic.comprehension.binary-items.erlang</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#internal-binary-type-specifiers</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>character</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\$ </string>
					<key>name</key>
					<string>invalid.illegal.raw-space-char-literal.erlang</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\$(?:[^\\]|(?:\\(?:\^.|[0-7]{1,3}|x[0-9a-fA-F]{2}|x\{[0-9a-fA-F]+\}|[^x\^])))(?![:alnum:])</string>
					<key>name</key>
					<string>constant.character.erlang</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\$\\x\{.+\}</string>
					<key>name</key>
					<string>invalid.illegal.character.erlang</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\$.?</string>
					<key>name</key>
					<string>invalid.illegal.character.erlang</string>
				</dict>
			</array>
		</dict>
		<key>comment</key>
		<dict>
			<key>begin</key>
			<string>(%+)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.comment.erlang</string>
				</dict>
			</dict>
			<key>end</key>
			<string>$\n?</string>
			<key>name</key>
			<string>comment.line.erlang</string>
		</dict>
		<key>expression</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>\b(if)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.if.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\b(end)\b</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.expression.if.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?&lt;=if|;)</string>
							<key>end</key>
							<string>(?=-&gt;)</string>
							<key>name</key>
							<string>meta.guard-expression.erlang</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(-&gt;)</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.clause-head-body.erlang</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(;)|(?=\b(end)\b)</string>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.clauses.erlang</string>
								</dict>
							</dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#internal-expression-list</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(case)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.case.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\b(end)\b</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.expression.case.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?&lt;=case)</string>
							<key>end</key>
							<string>\b(of)\b</string>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.control.of.erlang</string>
								</dict>
							</dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?&lt;=of|;)</string>
							<key>end</key>
							<string>(?=;|\b(end)\b)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#internal-guard-expression</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#internal-arrow-clause-expression</string>
								</dict>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(receive)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.receive.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\b(end)\b</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.expression.receive.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?&lt;=receive|;)</string>
							<key>end</key>
							<string>(?=\b(after|end)\b|;)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#internal-guard-expression</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#internal-arrow-clause-expression</string>
								</dict>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>\b(after)\b</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.control.after.erlang</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\b(end)\b)</string>
							<key>name</key>
							<string>meta.receive-after-section.erlang</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#internal-arrow-clause-expression</string>
								</dict>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(try)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.try.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\b(end)\b</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.expression.try.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>\b(of)\b</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.control.of.erlang</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\b(catch|after|end)\b)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#internal-guard-expression</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#internal-arrow-clause-expression</string>
								</dict>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>\b(catch)\b</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.control.catch.erlang</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\b(after|end)\b)</string>
							<key>name</key>
							<string>meta.try-catch-section.erlang</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>captures</key>
									<dict>
										<key>1</key>
										<dict>
											<key>name</key>
											<string>keyword.other.error-class.erlang</string>
										</dict>
										<key>2</key>
										<dict>
											<key>name</key>
											<string>punctuation.separator.error-class.erlang</string>
										</dict>
									</dict>
									<key>match</key>
									<string>\b(error|throw|exit|'error'|'throw'|'exit')\b\s*(:)</string>
								</dict>
								<dict>
									<key>match</key>
									<string>:</string>
									<key>name</key>
									<string>punctuation.separator.error-class.erlang</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#internal-guard-expression</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#internal-arrow-clause-expression</string>
								</dict>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>\b(after)\b</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.control.after.erlang</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\b(end)\b)</string>
							<key>name</key>
							<string>meta.try-after-section</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>\.</string>
									<key>name</key>
									<string>invalid.illegal.punctuation.dot.erlang</string>
								</dict>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(begin)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\b(end)\b</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.expression.begin.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>\.</string>
							<key>name</key>
							<string>invalid.illegal.punctuation.dot.erlang</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#internal-expression-list</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.catch.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\b(catch)\b</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>\b(fun)\b</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.fun.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\b(end)\b|(?=(/\s*(?:[0-9]+|(?:_[[:alnum:]@_]+|[[:upper:]][[:alnum:]@_]*)))|([^[:alnum:]\s\?\('/_]+))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.expression.fun.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?=\()</string>
							<key>end</key>
							<string>(?=\bend\b)</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>;</string>
									<key>name</key>
									<string>punctuation.separator.clauses.erlang</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#internal-function-parts</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>variable.language.omitted.fun-name.erlang</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>variable.other.fun-name.erlang</string>
								</dict>
							</dict>
							<key>match</key>
							<string>\b(?:(_)|((?:_[[:alnum:]@_]+|[[:upper:]][[:alnum:]@_]*)))\b</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>meta.function.module.erlang</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.module-function.erlang</string>
								</dict>
							</dict>
							<key>match</key>
							<string>((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))\s*(:)</string>
						</dict>
						<dict>
							<key>match</key>
							<string>(?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*)</string>
							<key>name</key>
							<string>meta.function.erlang</string>
						</dict>
						<dict>
							<key>captures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.function-arity.erlang</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>constant.numeric.decimal.function-arity.erlang</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>variable.language.omitted.function-arity.erlang</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>variable.other.function-arity.erlang</string>
								</dict>
							</dict>
							<key>match</key>
							<string>(/)\s*(?:([0-9]+)|(_)|((?:_[[:alnum:]@_]+|[[:upper:]][[:alnum:]@_]*)))?</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#macro-usage</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>function-call</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(?=((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))\s*(\(|:\s*((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))\s*\())</string>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.function-call.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(?:(erlang)\s*(:)\s*)?(abs|binary_part|bit_size|byte_size|element|float|hd|is_atom|is_binary|is_bitstring|is_boolean|is_float|is_function|is_integer|is_list|is_number|is_pid|is_port|is_record|is_reference|is_tuple|length|node|round|self|size|tl|trunc|tuple_size|is_map)\s*(\()</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>meta.function.module.erlang</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.module-function.erlang</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>support.function.guard.erlang</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.begin.erlang</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\))</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>,</string>
									<key>name</key>
									<string>punctuation.separator.parameters.erlang</string>
								</dict>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?:((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))?\s*(:)\s*)?((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))\s*(\()</string>
							<key>beginCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>meta.function.module.erlang</string>
								</dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.module-function.erlang</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>meta.function.erlang</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.parameters.begin.erlang</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(?=\))</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>match</key>
									<string>,</string>
									<key>name</key>
									<string>punctuation.separator.parameters.erlang</string>
								</dict>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.function.module.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.module-function.erlang</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>meta.function.erlang</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>match incomplete function calls to improve typing experience</string>
					<key>match</key>
					<string>((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))?\s*(:)((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))?(?!:)</string>
					<key>name</key>
					<string>meta.function-call.erlang</string>
				</dict>
			</array>
		</dict>
		<key>illegal-keyword</key>
		<dict>
			<key>match</key>
			<string>\b(after|begin|case|catch|cond|end|fun|if|let|of|try|receive|when)\b</string>
			<key>name</key>
			<string>invalid.illegal.keyword.control.erlang</string>
		</dict>
		<key>integer</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>2(#)[0-1]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.binary.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>3(#)[0-2]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-3.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>4(#)[0-3]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-4.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>5(#)[0-4]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-5.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>6(#)[0-5]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-6.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>7(#)[0-6]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-7.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>8(#)[0-7]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.octal.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>9(#)[0-8]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-9.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>10(#)\d+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.decimal.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>11(#)[\daA]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-11.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>12(#)[\da-bA-B]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-12.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>13(#)[\da-cA-C]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-13.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>14(#)[\da-dA-D]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-14.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>15(#)[\da-eA-E]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-15.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>16(#)\h+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.hexadecimal.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>17(#)[\da-gA-G]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-17.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>18(#)[\da-hA-H]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-18.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>19(#)[\da-iA-I]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-19.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>20(#)[\da-jA-J]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-20.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>21(#)[\da-kA-K]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-21.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>22(#)[\da-lA-L]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-22.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>23(#)[\da-mA-M]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-23.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>24(#)[\da-nA-N]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-24.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>25(#)[\da-oA-O]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-25.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>26(#)[\da-pA-P]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-26.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>27(#)[\da-qA-Q]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-27.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>28(#)[\da-rA-R]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-28.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>29(#)[\da-sA-S]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-29.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>30(#)[\da-tA-T]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-30.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>31(#)[\da-uA-U]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-31.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>32(#)[\da-vA-V]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-32.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>33(#)[\da-wA-W]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-33.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>34(#)[\da-xA-X]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-34.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>35(#)[\da-yA-Y]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-35.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.base-integer.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>36(#)[\da-zA-Z]+(?![\da-zA-Z])</string>
					<key>name</key>
					<string>constant.numeric.integer.base-36.erlang</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\d+#[\da-zA-Z]+</string>
					<key>name</key>
					<string>invalid.illegal.integer.erlang</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\d+</string>
					<key>name</key>
					<string>constant.numeric.integer.decimal.erlang</string>
				</dict>
			</array>
		</dict>
		<key>internal-arrow-clause-expression</key>
		<dict>
			<key>begin</key>
			<string>(-&gt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.clause-head-body.erlang</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(;)|(?=\b(end|after|catch)\b)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.clauses.erlang</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\.</string>
					<key>name</key>
					<string>invalid.illegal.punctuation.dot.erlang</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#internal-expression-list</string>
				</dict>
			</array>
		</dict>
		<key>internal-binary-type-specifiers</key>
		<dict>
			<key>begin</key>
			<string>(/)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.separator.value-type.erlang</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=,|:|&gt;&gt;)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.binary.type.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.binary.signedness.erlang</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.binary.endianness.erlang</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>storage.modifier.binary.unit.erlang</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.type-specifiers.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(integer|float|binary|bytes|bitstring|bits|utf8|utf16|utf32)|(signed|unsigned)|(big|little|native)|(unit)|(-)</string>
				</dict>
			</array>
		</dict>
		<key>internal-expression-list</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>punctuation.separator.expressions.erlang</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>internal-function-parts</key>
		<dict>
			<key>name</key>
			<string>function-parts</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.erlang</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.parameters.erlang</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#internal-guard-expression</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(-&gt;)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.function.head-body.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=;|end|\.)</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#internal-expression-list</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
			</array>
		</dict>
		<key>internal-guard-expression</key>
		<dict>
			<key>begin</key>
			<string>(when)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.when.erlang</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=-&gt;)</string>
			<key>name</key>
			<string>meta.guard-expression.erlang</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>,|;</string>
					<key>name</key>
					<string>punctuation.separator.guards.erlang</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>list</key>
		<dict>
			<key>begin</key>
			<string>(\[)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.list.begin.erlang</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\])</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.list.end.erlang</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.structure.list.erlang</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\|(?!\|)|,</string>
					<key>name</key>
					<string>punctuation.separator.list.erlang</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\|\|</string>
					<key>name</key>
					<string>keyword.operator.symbolic.comprehension.erlang</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&lt;-</string>
					<key>name</key>
					<string>keyword.operator.symbolic.comprehension.list-items.erlang</string>
				</dict>
				<dict>
					<key>match</key>
					<string>&lt;=</string>
					<key>name</key>
					<string>keyword.operator.symbolic.comprehension.binary-items.erlang</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>macro-usage</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(\?(?:[[:alpha:]_][[:alnum:]@_]*))\s*(\()</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.macro.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\))</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.parameters.end.erlang</string>
						</dict>
					</dict>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>,</string>
							<key>name</key>
							<string>punctuation.separator.parameters.erlang</string>
						</dict>
						<dict>
							<key>include</key>
							<string>$self</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.other.macro.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\?(?:[[:alpha:]_][[:alnum:]@_]*))(?!\()</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.macro.stringify.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.other.preprocessor.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(\?\?)((?:_[[:alnum:]@_]+|[[:upper:]][[:alnum:]@_]*))</string>
				</dict>
			</array>
		</dict>
		<key>maps-usage</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>(#)\s*(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.maps.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.type.maps.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.type.maps.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.maps-usage.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#macro-usage</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?&lt;=(\{)|(,))</string>
							<key>beginCaptures</key>
							<dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.type.maps.erlang</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(:=|=&gt;)</string>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>keyword.operator.assignment.erlang</string>
								</dict>
							</dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#tuple</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#list</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#binary</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#parenthesized-expression</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#character</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#number</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#atom</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#string</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#variable</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#comment</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#macro-usage</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>begin</key>
							<string>(?&lt;=(:=|=&gt;))</string>
							<key>end</key>
							<string>(?=(,|\}))</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>number</key>
		<dict>
			<key>begin</key>
			<string>(?=\d)</string>
			<key>end</key>
			<string>(?!\d)</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.integer-float.erlang</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.float-exponent.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>\d+(\.)\d+(([eE][\+\-])?\d+)?</string>
					<key>name</key>
					<string>constant.numeric.float.erlang</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#integer</string>
				</dict>
			</array>
		</dict>
		<key>parenthesized-expression</key>
		<dict>
			<key>begin</key>
			<string>(\()</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.expression.begin.erlang</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\))</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.expression.end.erlang</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.expression.parenthesized</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>record-usage</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.record.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.record-field.erlang</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>storage.type.record.field.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(#(?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))\s*(\.)\s*((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))</string>
					<key>name</key>
					<string>meta.record-usage.erlang</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>(#(?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))\s*(\{)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.record.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.class.record.begin.erlang</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(\})</string>
					<key>endCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.class.record.end.erlang</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.record-usage.erlang</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>(((?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))|(_))\s*(=)</string>
							<key>beginCaptures</key>
							<dict>
								<key>2</key>
								<dict>
									<key>name</key>
									<string>storage.type.record.field.erlang</string>
								</dict>
								<key>3</key>
								<dict>
									<key>name</key>
									<string>storage.type.record.field.catch-all.erlang</string>
								</dict>
								<key>4</key>
								<dict>
									<key>name</key>
									<string>keyword.operator.assignment.erlang</string>
								</dict>
							</dict>
							<key>end</key>
							<string>(,)|(?=\})</string>
							<key>endCaptures</key>
							<dict>
								<key>1</key>
								<dict>
									<key>name</key>
									<string>punctuation.separator.class.record.erlang</string>
								</dict>
							</dict>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>$self</string>
								</dict>
							</array>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#macro-usage</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>storage.type.record.erlang</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>match incomplete record references to improve typing experience</string>
					<key>match</key>
					<string>(#(?:'[^'\\]*(?:\\.[^'\\]*)*'|[[:lower:]][[:alnum:]@_]*))</string>
					<key>name</key>
					<string>meta.record-usage.erlang</string>
				</dict>
			</array>
		</dict>
		<key>string</key>
		<dict>
			<key>begin</key>
			<string>(")</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.begin.erlang</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(")</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.string.end.erlang</string>
				</dict>
			</dict>
			<key>name</key>
			<string>string.quoted.double.erlang</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.escape.erlang</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.escape.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?:\\(?:\^.|[0-7]{1,3}|x[0-9a-fA-F]{2}|x\{[0-9a-fA-F]+\}|[^x\^]))</string>
					<key>name</key>
					<string>constant.character.escape.erlang</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\\\^?.?</string>
					<key>name</key>
					<string>invalid.illegal.string.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.placeholder.erlang</string>
						</dict>
						<key>10</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.placeholder-parts.erlang</string>
						</dict>
						<key>12</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.placeholder-parts.erlang</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.placeholder-parts.erlang</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.placeholder-parts.erlang</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.placeholder-parts.erlang</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.placeholder-parts.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(~)((\-)?\d+|(\*))?((\.)(\d+|(\*)|))?((\.)((\*)|.))?[t]?[~cfegswpWPBX#bx\+ni]</string>
					<key>name</key>
					<string>constant.other.placeholder.erlang</string>
				</dict>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.placeholder.erlang</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.separator.placeholder-parts.erlang</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(~)(\*)?(\d+)?[~du\-#fsacl]</string>
					<key>name</key>
					<string>constant.other.placeholder.erlang</string>
				</dict>
				<dict>
					<key>match</key>
					<string>~[^"]?</string>
					<key>name</key>
					<string>invalid.illegal.string.erlang</string>
				</dict>
			</array>
		</dict>
		<key>symbolic-operator</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>-&gt;</string>
					<key>name</key>
					<string>invalid.illegal.arrow.erlang</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\+\+|\+|--|-|\*|/=|/|=/=|=:=|==|=&lt;|=|&lt;|&gt;=|&gt;|!</string>
					<key>name</key>
					<string>keyword.operator.symbolic.erlang</string>
				</dict>
			</array>
		</dict>
		<key>textual-operator</key>
		<dict>
			<key>match</key>
			<string>\b(andalso|band|and|bxor|xor|bor|orelse|or|bnot|not|bsl|bsr|div|rem)\b</string>
			<key>name</key>
			<string>keyword.operator.textual.erlang</string>
		</dict>
		<key>tuple</key>
		<dict>
			<key>begin</key>
			<string>(\{)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tuple.begin.erlang</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\})</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.tuple.end.erlang</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.structure.tuple.erlang</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>,</string>
					<key>name</key>
					<string>punctuation.separator.tuple.erlang</string>
				</dict>
				<dict>
					<key>include</key>
					<string>$self</string>
				</dict>
			</array>
		</dict>
		<key>variable</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.other.erlang</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.language.omitted.erlang</string>
				</dict>
			</dict>
			<key>match</key>
			<string>((?:_[[:alnum:]@_]+|[[:upper:]][[:alnum:]@_]*))|(_)</string>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.erlang.expression</string>
</dict>
</plist>
