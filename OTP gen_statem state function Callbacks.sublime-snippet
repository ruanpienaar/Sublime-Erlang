<snippet>
	<scope>source.erlang - source.erlang.expression</scope>
	<description>gen_statem state function Callbacks</description>
	<content><![CDATA[-export([start_link/0]).

-behaviour(gen_statem).

%% gen_statem callbacks
-export([callback_mode/0, init/1, terminate/3, code_change/4]).
-export([${1:initial_state}/3]).

-define(SERVER, ?MODULE).

-spec start_link() ->
			{ok, Pid :: pid()} |
			ignore |
			{error, Error :: term()}.
start_link() ->
	gen_statem:start_link({local, ?SERVER}, ?MODULE, {}, []).

-spec callback_mode() -> gen_statem:callback_mode_result().
callback_mode() -> 
	state_functions.

%% @private
-spec init(Args :: term()) ->
		  gen_statem:init_result(term()).
init({}) ->
	{ok, ${1}, undefined}.

%% @private
-spec ${1}('enter',
		 OldState :: atom(),
		 Data :: term()) ->
			gen_statem:state_enter_result('${1}');
		(gen_statem:event_type(),
		 Msg :: term(),
		 Data :: term()) ->
			gen_statem:event_handler_result(atom()).
${1}({call, From}, _Msg, State) ->
	{next_state, ${1}, State, [{reply, From, ok}]};
${1}(cast, _Msg, State) ->
	{next_state, ${1}, State};
${1}(info, _Msg, State) ->
	{next_state, ${1}, State}.

%% @private
terminate(_Reason, _StateName, _State) ->
	void.

%% @private
code_change(_OldVsn, StateName, State, _Extra) ->
	{ok, StateName, State}.
]]></content>
</snippet>